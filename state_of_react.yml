locale: nb-NO
translations:
    ###########################################################################
    # General
    ###########################################################################

    - key: general.state_of_react.intro
      t: |
          React har eksistert en stund nå, og det er klart at det har blitt et av de dominerende front-end-rammeverkene. 

          Likevel, selv om React fortsatt utvikler seg i raskt tempo, gjør fellesskapet sitt beste for å følge med.  

          Med State of React-utviklerundersøkelsen håper vi å få oversikt over denne utviklingen og hjelpe utviklere med å navigere i det omfattende React-økosystemet.

    - key: general.state_of_react.description
      t: Den årlige utviklerundersøkelsen om React-økosystemet

    - key: features.features_intro_react
      t: |
          Velkommen til undersøkelsen! Denne første delen handler om å finne ut hvilke 
          av de offisielle React-APIene du kjenner til og bruker.

          Forresten, hvis du vil fortelle oss mer om noen av valgene dine, kan du bare klikke på det lille "kommentar"-ikonet!

    - key: tools.tools_intro_react
      t: |
          De neste seksjonene fokuserer på **biblioteker** og **rammeverk** som utgjør 
          React-økosystemet. Gi oss beskjed om hva du er begeistret for!

    # sections
    - key: sections.main_apis.title
      t: Hoved-APIer
    - key: sections.main_apis.description
      t: Stabile og veletablerte React-features

    - key: sections.hooks.title
      t: Hooks
    - key: sections.hooks.description
      t: React's innebygde hooks

    - key: sections.new_apis.title
      t: Nye APIer
    - key: sections.new_apis.description
      t: Nylig introduserte- og eksperimentelle features

    - key: sections.component_libraries.title
      t: Komponentbilbiotel
    - key: sections.component_libraries.description
      t: Byggesteinene til din applikasjon

    # - key: sections.data_management.title
    #   t: Data Management
    # - key: sections.data_management.description
    #   t: Loading and managing application data

    - key: sections.state_management.title
      t: Statehåndtering
    - key: sections.state_management.description
      t: Biblioteker for å håndtere applikasjonsstate

    - key: sections.data_loading.title
      t: Datalasting
    - key: sections.data_loading.description
      t: Verktøy for å laste inn og håndtere data

    - key: sections.back_end_infrastructure.title
      t: Back-End & infrastruktur
    - key: sections.back_end_infrastructure.description
      t: Bygging og levering av applikasjon

    # - key: sections.usage.title
    #   t: Back-End & Infrastructure
    # - key: sections.usage.description
    #   t: Bundling & serving your app

    # old sections

    # - key: sections.ui_libraries.title
    #   t: UI Libraries
    # - key: sections.ui_libraries.description
    #   t: Component libraries and other UI toolkits.

    # - key: sections.meta_frameworks.title
    #   t: Meta Frameworks
    # - key: sections.meta_frameworks.description
    #   t: Frameworks that help render and serve your React app

    # - key: sections.testing.title
    #   t: Testing
    # - key: sections.testing.description
    #   t: Testing utilities and libraries

    - key: sections.tools.title
      t: Andre verktøy
    - key: sections.tools.description
      t: Andre React verktøy og bibliotek

    - key: sections.usage_react.title
      t: Bruk
    - key: sections.usage_react.description
      t: Hvordan du bruker React på dalig basis

    - key: tools.data_loading_heading
      t: Bibliotek for datalasting

    - key: tools.state_management_heading
      t: Bibliotek for statehåndtering

    # features

    - key: features.main_apis_pain_points
      t: API-utfordringer
    - key: features.main_apis_pain_points.question
      t: Hvilke utfordringer har du støtt på knyttet til de tidligere nevnte API-ene?

    - key: features.hooks_pain_points
      t: Hooks-utfordringer
    - key: features.hooks_pain_points.question
      t: Hvilke utfordringer har du støtt på knyttet til hooks?

    - key: features.new_apis_pain_points
      t: Nye API-utfordringer
    - key: features.new_apis_pain_points.question
      t: Hvilke utfordringer har du støtt på knyttet til de nye API-ene?

    # main features
    - key: features.fragment.description
      t: >
          `<Fragment>`, ofte bruk med syntaxen `<>...</>`, lar deg gruppere elementer uten et wrapper element.
    - key: features.profiler.description
      t: >
          `<Profiler>` lar deg måle ytelsen av ytelsen på rendring av React-treet programmatisk.
    - key: features.strictmode.description
      t: >
          `<StrictMode>` lar deg finne vanlige feil i komponentene dine tidlig i utviklingen.

    - key: features.createportal.description
      t: >
          `createPortal` lar deg rendre komponenter som regnes som underkomponenter, andres steder i DOMen.

    - key: features.createcontext.description
      t: >
          `createContext` lar deg opprette en kontekst som komponenter kan tilby eller lese fra.

    - key: features.forwardref.description
      t: >
          `forwardRef` lar komponenten din eksponere en DOM-node til en foreldre-node med en ref.

    - key: features.lazy.description
      t: >
          `lazy` lar deg utsette innlasting av komponentens kode til den blir rendret for første gang.

    - key: features.memo.description
      t: >
          `memo` lar deg unngå at en komponent blir rendret på nytt når props er uendret.

    - key: features.createroot.description
      t: >
          `createRoot` lar deg opprette en rot for å vise React-komponenter inne i en browser DOM-node.

    - key: features.hydrateroot.description
      t: >
          `hydrateRoot` lar deg vise React-komponenter inne i en browser DOM-node hvis HTML-innhold ble generert tidligere av `react-dom/server`.

    # hooks

    - key: features.usecallback.description
      t: >
          `useCallback` er en React Hook som lar deg cache en funksjonsdefinisjon mellom re-renderinger.

    - key: features.usecontext.description
      t: >
          `useContext` er en React Hook som lar deg lese fra og abonnere på kontekst fra komponenten din.

    - key: features.usedebugvalue.description
      t: >
          `useDebugValue` er en React Hook som lar deg legge til en etikett til en egendefinert Hook i React DevTools.

    - key: features.usedeferredvalue.description
      t: >
          `useDeferredValue` er en React Hook som lar deg utsette oppdateringen av en del av brukergrensesnittet.

    - key: features.useeffect.description
      t: >
          `useEffect` er en React Hook som lar deg synkronisere en komponent med et eksternt system.

    - key: features.useid.description
      t: >
          `useId` er en React Hook for å generere unike ID-er som kan brukes i atributter for tilgjengelighet.

    - key: features.usememo.description
      t: >
          `useMemo` er en React Hook som lar deg cache resultatet av en beregning mellom re-renderinger.

    - key: features.usereducer.description
      t: >
          `useReducer` er en React Hook som lar deg legge til en reducer i komponenten din.

    - key: features.useref.description
      t: >
          `useRef` er en React Hook som lar deg referere til en verdi som ikke er nødvendig for rendering.

    - key: features.usestate.description
      t: >
          `useState` er en React Hook som lar deg legge til en state-variabel i komponenten din.

    - key: features.usesyncexternalstore.description
      t: >
          `useSyncExternalStore` er en React Hook som lar deg abonnere på et eksternt datalager.

    - key: features.usetransition.description
      t: >
          `useTransition` er en React Hook som lar deg oppdatere tilstanden uten å blokkere brukergrensesnittet.

    # new features

    - key: features.suspense.description
      t: >
          `<Suspense>` lar deg vise en fallback fram til data er ferdig lastet.

    - key: features.use_hook.description
      t: >
          `use`er en React Hook som lar deg lese verdien av en ressurs som et Promise eller kontekst.

    - key: features.starttransition.description
      t: >
          `startTransition` lar deg oppdatere state uten å blokkere brukergrensesnittet.

    - key: features.react_server_components.description
      t: >
          Komponenter som kun kjører på server

    - key: features.use_client.description
      t: >
          `'use client'` markerer kildefiler med komponenter som kjører på klienten.

    - key: features.use_server.description
      t: >
          `'use server'` markerer server-side funksjoner som kan kalles fra klient-side-kode.

    - key: features.server_actions.description
      t: >
          React's innebygde løsning for server-mutasjoner.

    - key: features.taint_api.description
      t: >
          Forhindre at et spesifikt objekt eller en verdi blir sendt til en Client Component.
    - key: features.cache.description
      t: >
          `cache` lar deg cache data fra en datalasting eller kalkulasjon.

    - key: features.useformstatus.description
      t: >
          `useFormStatus` er en Hook som gir deg state om den siste skjema-innsendelsen.

    - key: features.useformstate.description
      t: >
          `useFormState` er en Hook som lar deg oppdatere state basert på resultatet av en skjema-hendelse.

    # tools

    - key: tools.component_libraries_others
      t: Andre komponentbibliotek
    - key: tools.component_libraries_others.question
      t: Hvilke andre komponentbiblioteker har du brukt?

    - key: tools.component_libraries_pain_points
      t: Utfordringer med komponenter
    - key: tools.component_libraries_pain_points.question
      t: Hvilke utfordringer har du støtt på når det gjelder å arbeide med komponenter?

    # - key: tools.ui_libraries_happiness
    #   t: Happiness
    # - key: tools.ui_libraries_happiness.description
    #   t: How happy are you with the state of UI libraries?

    - key: tools.state_management_others
      t: Andre biblioteker for statehåndtering
    - key: tools.state_management_others.question
      t: Hvilke andre biblioteker har du brukt for å håndtere state i appene dine?

    - key: tools.state_management_pain_points
      t: Utfordringer med statehåndtering
    - key: tools.state_management_pain_points.question
      t: Hvilke utfordringer har du støtt på når det gjelder statehåndtering?

    # - key: tools.state_management_happiness
    #   t: Happiness
    # - key: tools.state_management_happiness.description
    #   t: How happy are you with the available state management libraries?

    - key: tools.data_loading_others
      t: Andre biblioteker for datalasting
    - key: tools.data_loading_others.question
      t: Hvilke andre biblioteker har du brukt for å laste data?

    - key: tools.data_loading_pain_points
      t: Utfordringer med datalasting
    - key: tools.data_loading_pain_points.question
      t: Hvilke utfordringer har du støtt på når det gjelder datalasting?

    # - key: tools.data_loading_happiness
    #   t: Happiness
    # - key: tools.data_loading_happiness.description
    #   t: How happy are you with the state of data loading libraries?

    - key: tools.meta_frameworks_others
      t: Andre meta-rammeverk
    # - key: tools.meta_frameworks_happiness
    #   t: Happiness
    # - key: tools.meta_frameworks_happiness.description
    #   t: How happy are you with the current state of meta-frameworks?

    - key: tools.meta_frameworks_heading
      t: Meta-rammeverk

    - key: tools.other_back_end_tools_heading
      t: Andre back-end-verktøy og -tjenester

    - key: tools.back_end_infrastructure_pain_points
      t: Utfordringer med back-end
    - key: tools.back_end_infrastructure_pain_points.question
      t: Hvilke utfordringer har du støtt på når det gjelder back-end og infrastruktur?

    - key: tools.testing
      t: Testbiblioteker
    - key: tools.testing.question
      t: Hvilke biblioteker bruker du for å teste React-appene dine?

    # - key: tools.testing_happiness
    #   t: Happiness
    # - key: tools.testing_happiness.description
    #   t: How happy are you with the current state of testing libraries?

    - key: tools.mobile_development
      t: Mobilutvikling
    - key: tools.mobile_development.question
      t: Hvilke biblioteker har du brukt for mobilutvikling?

    # - key: tools.mobile_development_others
    #   t: Other Mobile Development Tools
    # - key: tools.mobile_development_happiness
    #   t: Happiness
    # - key: tools.mobile_development_happiness.description
    #   t: How happy are you with the current state of mobile development?

    # other tools
    - key: tools.form_libraries
      t: Skjemabiblioteker
    # - key: tools.form_libraries.description
    #   t: Libraries for generating and validating forms.
    - key: tools.form_libraries.question
      t: Hvilke biblioteker har du brukt for å håndtere skjemaer?
    - key: options.form_libraries.na
      t: Ingen

    - key: tools.build_tools
      t: Verktøy for bygging
    # - key: tools.build_tools.description
    #   t: Build tools and bundlers.
    - key: tools.build_tools.question
      t: Hvilke byggeverktøy og bundlere har du brukt?

    - key: tools.animation_libraries
      t: Animasjon
    # - key: tools.animation.description
    #   t: Libraries to help manage animations and transitions.
    - key: tools.animation_libraries.question
      t: Hvilke biblioteker har du brukt for animasjon?

    - key: tools.auth
      t: Autentisering
    # - key: tools.auth.description
    #   t: Libraries and services for managing authentication and accounts.
    - key: tools.auth.question
      t: Hvilke biblioteker og tjenester har du brukt for å håndtere autentisering?

    - key: tools.data_visualization_libraries
      t: Datavisualisering
    # - key: tools.data_visualization.description
    #   t: Data visualization and graphics libraries.
    - key: tools.data_visualization_libraries.question
      t: Hvilke datavisualiserings- og grafikkbiblioteker har du brukt?

    - key: tools.css_tools
      t: CSS-verktøy og bibliotek
    # - key: tools.css_tools.description
    #   t: CSS libraries, frameworks, and utilities you use to style your React app.
    - key: tools.css_tools.question
      t: Hvilke biblioteker eller rammeverk har du brukt for å style React-appene dine?

    - key: tools.other_frontend_frameworks
      t: Andre front-end-rammeverk
    # - key: tools.other_frontend_frameworks.description
    #   t: >
    #     Other front-end frameworks
    - key: tools.other_frontend_frameworks.question
      t: >
          Hvilke andre front-end-rammeverk har du brukt?

    - key: tools.hosting
      t: Hosting-tjenester
    # - key: tools.hosting.description
    #   t: Services you use to host your React apps.
    - key: tools.hosting.question
      t: Hvilke tjenester har du brukt for å hoste React-appene dine?

    - key: tools.backend_language
      t: Back-end språk
    - key: tools.backend_language.question
      t: Hvilket(e) språk er back-end-appene dine skrevet i?

    - key: tools.other_services
      t: Andre tjenester
    - key: tools.other_services.question
      t: Hvilke andre tjenester har du brukt sammen med React-appene dine?

    - key: tools.validation
      t: Schema & valideringsbibliotekers
    - key: tools.validation.question
      t: Hvilke biblioteker har du brukt for å validere data mot et schema?

    - key: tools.ai_tools
      t: AI verktøy
    - key: tools.ai_tools.question
      t: Hvilke AI-verktøy eller -tjenester har du brukt for å hjelpe deg med å skrive React-kode?

    - key: tools.renderers
      t: React Rendrere
    - key: tools.renderers.question
      t: Hvilke biblioteker har du brukt for å rendre React til forskjellige plattformer eller miljøer?

    - key: tools.other_tools
      t: Andre verktøy
    - key: tools.tools.question
      t: WHvilke andre verktøy har du brukt for å utvikle React-apper?

    # CSS
    - key: options.css_tools.plain_css
      t: CSS (plain, “vanilla” CSS)

    # react pain points

    - key: options.react_pain_points.rerenders
      t: Håndtering av komponent-re-renderinger
    - key: options.react_pain_points.testing
      t: Testing
    - key: options.react_pain_points.data_loading
      t: Data lasting og asynce operasjoner
    - key: options.react_pain_points.state_management
      t: Statehåndtering (`useState`, Redux, Context, etc.)
    - key: options.react_pain_points.bundle_sizes
      t: Minimere størrelsen på bundle
    - key: options.react_pain_points.server_rendering
      t: Server-Side Rendering & Server Components
    - key: options.react_pain_points.css_styling
      t: CSS & styling
    - key: options.react_pain_points.attribute_names
      t: “Feil” attribut-navn som `className`, `htmlFor`, etc.
    - key: options.react_pain_points.synthetic_events
      t: Syntetiske hendelser
    - key: options.react_pain_points.ref_management
      t: Ref-håndtering
    - key: options.react_pain_points.memoization
      t: Memoization
    - key: options.react_pain_points.animations
      t: Animasjoner og overganger
    - key: options.react_pain_points.forms
      t: Skjema
    - key: options.react_pain_points.typescript
      t: Manglende offisiell støtte for TypeScript

    # usage type
    - key: usage.react_usage_type
      t: React-bruk
    - key: usage.react_usage_type.question
      t: I hvilke kontekst bruker du vanligvis React?

    # react version

    - key: usage.react_version
      t: React-versjon
    - key: usage.react_version.question
      t: Hvilke versjon av React bruker du vanligvis på daglig basis?

    - key: options.react_version.react_v16x
      t: 16.x
    - key: options.react_version.react_v17x
      t: 17.x
    - key: options.react_version.react_v18x
      t: 18.x
    - key: options.react_version.react_canary
      t: Canary
    - key: options.react_version.not_sure
      t: Ikke sikker

    # JS App Patterns

    - key: usage.js_app_patterns
      t: Applikasjonsmønstre
    - key: usage.js_app_patterns.question
      t: Hvilke av de følgende arkitektur- og renderingmønstrene har du brukt **det siste året**?

    - key: options.js_app_patterns.single_page_app
      t: Ensideapplikasjon (SPA)
    - key: options.js_app_patterns.single_page_app.description
      t: Apper som bare kjører i nettleseren
    - key: options.js_app_patterns.multiple_page_app
      t: Flersideapplikasjon (MPA)
    - key: options.js_app_patterns.multiple_page_app.description
      t: Apper som kjører helt på serveren, med minimal dynamisk oppførsel på klientsiden
    - key: options.js_app_patterns.static_site_generation
      t: Statisk nettstedgenerering (SSG)
    - key: options.js_app_patterns.static_site_generation.description
      t: Forhånds-rendret statisk innhold, med eller uten en dynamisk element på klientsiden
    - key: options.js_app_patterns.server_side_rendering
      t: Server-Side rendering (SSR)
    - key: options.js_app_patterns.server_side_rendering.description
      t: Dynamisk rendering av HTML-innhold på serveren før det rehydrereres på klientsiden
    - key: options.js_app_patterns.partial_hydration
      t: Delvis hydrering
    - key: options.js_app_patterns.partial_hydration.description
      t: Bare rehydrere noen av komponentene dine på klientsiden (f.eks. React Server Components)
    - key: options.js_app_patterns.progressive_rehydration
      t: Progressiv hydrering
    - key: options.js_app_patterns.progressive_rehydration.description
      t: Kontrollere rekkefølgen av komponentrehydrering på klientsiden
    - key: options.js_app_patterns.islands_architecture
      t: Øy-arkitektur
    - key: options.js_app_patterns.islands_architecture.description
      t: Isolerte øyer med dynamisk oppførsel med flere inngangspunkter på et ellers statisk nettsted (Astro, Eleventy)
    - key: options.js_app_patterns.progressive_enhancement
      t: Progressiv forbedring
    - key: options.js_app_patterns.progressive_enhancement.description
      t: Særget for at en app er funksjonell selv uten JavaScript
    - key: options.js_app_patterns.incremental_static_generation
      t: Inkrementell statisk generering
    - key: options.js_app_patterns.incremental_static_generation.description
      t: Å kunne dynamisk utvide eller endre et statisk nettsted selv etter den første byggingen (Next.js ISR, Gatsby DSG)
    - key: options.js_app_patterns.streaming_ssr
      t: Streaming SSR
    - key: options.js_app_patterns.streaming_ssr.description
      t: Bryte ned server-rendret innhold i mindre strømmende biter
    - key: options.js_app_patterns.resumability
      t: Gjenopptagbarhet (Resumability)
    - key: options.js_app_patterns.resumability.description
      t: Serialisering av rammeverksstatus på serveren slik at klienten kan gjenoppta utførelsen uten duplisering av kodekjøring.
    - key: options.js_app_patterns.edge_rendering
      t: Edge rendering
    - key: options.js_app_patterns.edge_rendering.description
      t: Endre rendret HTML på "edge" før det sendes videre til klienten

    - key: options.js_app_patterns.micro_frontend
      t: Microfrontend
    - key: options.js_app_patterns.domain_driven_design
      t: Domain-Driven Design
    - key: options.js_app_patterns.serverless
      t: Serverless
    - key: options.js_app_patterns.pespa
      t: PESPA

    - key: usage.what_do_you_use_react_for
      t: React-bruk
    - key: usage.what_do_you_use_react_for.question
      t: Hva bruker du React til?

    - key: usage.react_pain_points
      t: Utfordringer med React

    - key: usage.state_of_react
      t: Tilfredshet
    - key: usage.state_of_react.question
      t: Hvor fornøyd er du med den nåværende tilstanden til React?

    - key: usage.usage_pain_points
      t: Andre utfordringer
    - key: usage.usage_pain_points.question
      t: Andre utfordringer med React som du ønsker å nevne?

    # new features
    - key: usage.new_features
      t: Nye funksjoner
    - key: usage.new_features.question
      t: Hvilke av de nylige og kommende nye funksjonene er du mest spent på?

    - key: options.new_features.asset_loading
      t: Ressursinnlasting
    - key: options.new_features.asset_loading.description
      t: Fullt integrert Suspense med lastesyklusen til stilark, skrifttyper og bilder
    - key: options.new_features.cache.description
      t: Et API for å hjelpe med caching
    - key: options.new_features_react_forget.description
      t: En kompilator for automatisk reaktivitet
    - key: options.new_features.new_docs
      t: Ny dokumentasjon
    - key: options.new_features.new_docs.description
      t: React's oppdaterte dokumentasjon.
    - key: options.new_features.offscreen_rendering
      t: Offscreen-rendering
    - key: options.new_features_offscreen_rendering.description
      t: Rendring av skjermer i bakgrunnen uten nedsatt ytelse.
    - key: options.new_features.use_hook
      t: >
          `use` Hook
    - key: options.new_features.use_hook.description
      t: >
          `use` pakker ut verdien av en Promise, men kan brukes inne i vanlige komponenter og Hooks, inkludert på klientsiden.

    - key: options.new_features.transition_tracing
      t: Overgangssporing
    - key: options.new_features.transition_tracing.description
      t: Oppdage når React-overganger blir tregere og undersøke hvorfor de kan være trege.

    # what do you use React for?
    - key: options.what_do_you_use_react_for.static_sites
      t: Statiske sider
    - key: options.what_do_you_use_react_for.design_systems
      t: Designsystem
    - key: options.what_do_you_use_react_for.web_apps
      t: Webapper
    - key: options.what_do_you_use_react_for.mobile_apps
      t: Mobilapper
    - key: options.what_do_you_use_react_for.desktop_apps
      t: Skrivebordsapplikasjoner

    # resources
    - key: resources.learning_methods_react
      t: Læringsmetoder
    - key: resources.learning_methods_react.question
      t: Hvilken type ressurser har du brukt for å lære React?

    - key: resources.blogs_news_magazines_react
      t: Blogger og nyhetsbrev
    - key: resources.blogs_news_magazines_react.question
      t: Hvilke blogger, blader eller nyhetsbrev leser du for å følge med på nyheter om React?

    - key: resources.sites_courses_react
      t: Sider og kurs
    - key: resources.sites_courses_react.question
      t: Hvilke nettsider eller kurs har du brukt for å lære React?

    - key: resources.podcasts_react
      t: Podcaster
    - key: resources.podcasts_react.question
      t: Hvilke React eller web-relaterte podcaster hører du på?

    - key: resources.video_creators_react
      t: Videoskapere
    - key: resources.video_creators_react.question
      t: Hvilke React eller web-relaterte videoskapere ser du på på YouTube, Twitch, etc.?

    - key: resources.people_react
      t: Personer
    - key: resources.people_react.question
      t: Hvem følger du, leser du publiserings av eller bare ønsker å framheve i React-miljøet?
